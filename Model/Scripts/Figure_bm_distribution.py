"""
This code plots the distributions generated by the benchmark model and other counterfactural models
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import project_path
from Figure_General import set_style, set_axes, set_size, save_fig
from counterfactural_parameter import counterfactural_entry_decline, counterfactural_entry_decline_vx, counterfactural_para_change, counterfactural_gamma_l

from calibration import read_result, _solve_model


def plot_model_distribution(res, label="Benchmark Model", _ax=None,
                            size_dist=False,
                            ):
    if _ax:
        ax = _ax
    else:
        fig, ax = plt.subplots()

    vals = res.s_vals if not size_dist else res.n_vals # default plot productivity distribution but alternatively can use res.n_vals to show size dist. (but more concentrated and need to adjust x_lim and y_lim)

    # print(sum(res.nu))
    ax.plot(vals, res.nu, label="Productivity Dist. (Entrant)") # label+": Entrant"
    # print(sum(res.mu_pmf))
    ax.plot(vals, res.mu_pmf, label="Productivity Dist. (All Est.)") # label+": All"
    # incumbent_pmf = (res.mu_pmf - res.nu) / (1-sum(res.nu))
    # print(sum(incumbent_pmf))
    # ax.plot(vals, incumbent_pmf, label=label+": Incumbent")

    ax.axvline(x=res.nu@vals, color='C0', linestyle='--', label="Mean (Entrant)")
    ax.axvline(x=res.mu_pmf@vals, color='C1', linestyle='--', label="Mean (All Est.)")
    ax.axvline(x=res.x, color='black', linestyle='--', label='Exit threshold')
    # print(res.x)
    if not _ax:
        return fig, ax

def set_model_distribution(ax):
    ax.set_ylim(0,0.02)
    ax.set_xlabel('Productivity ($s$)')
    ax.set_ylabel('Probability Mass Function (PMF)')
    ax.legend(loc='best', frameon=False, )


def plot_model_distribution_evolution(res):

    fig, ax = plt.subplots()

    ax.plot(res.s_vals, res.nu, label="Age 0")
    age_vals = [3, 5, 10, 20, 30, 40]
    alphas = np.linspace(1.0, 0.2, len(age_vals))
    for a, alpha in zip(age_vals, alphas):
        conditional_pdf = res.calculate_cohort_conditional_pdf(a)
        survival_rate = sum(conditional_pdf)
        conditional_pdf = conditional_pdf / survival_rate
        ax.plot(res.s_vals, conditional_pdf, label= f"Age {a}")

    return fig, ax


def main():

    x = read_result()[:-1]
    res_bm = _solve_model(x)

    eta=0
    res_lf = _solve_model(x, eta=eta)
    res_vx = counterfactural_entry_decline_vx(entry_target=res_lf.entry_rate) # all cf results of ["Entry Cost Increase", "Exit Value Decline", "Fixed Cost Decline"] have same distribution change as same exit threshold change

    res_el = counterfactural_para_change(para_index=2, para_ratio=.6)
    res_es = counterfactural_para_change(para_index=3, para_ratio=.6)

    res_gl = counterfactural_gamma_l(w_diff_ratio_target=2)

    res_all = [res_bm, res_vx, res_el, res_es, res_gl]
    res_names = ["Benchmark Model",  "Exit Value Decline",  "Entry Dist. Location Decline", "Entry Dist. Scale Decline", "Size-Correlated Wage"]
    file_names = ["bm", "vx", "el", "es", "gl"] # "lf", "ce", "cf",

    set_style()

    for res, label, name in zip(res_all, res_names, file_names):
        fig, ax = plot_model_distribution(res=res, label=label)
        set_model_distribution(ax)
        set_size(fig, fraction=0.7, row=1,)
        save_fig(fig, f'benchmark_distribution_{name}.pdf')

    fig, ax = plot_model_distribution_evolution(res=res_bm)
    set_model_distribution(ax)
    set_size(fig, fraction=0.7, row=1,)
    save_fig(fig, f'benchmark_distribution_evolution.pdf')

if __name__ == "__main__":
    main()
